#include <iostream>
#include <fstream>
#include "lab05_tasks.hpp"

// name of the image that the tasks automatically pick. The image must be inside the docs folder in order for this to work properly
#define defImgName "Asphalt-2.png"

using namespace std;

bool usesLinuxSeparator()
{
    #ifdef _WIN32
    return false;
    #elif _WIN64
    return false;
    #elif __APPLE__ || __MACH__
    return true;
    #elif __linux__
    return true;
    #elif __FreeBSD__
    return true;
    #elif __unix || __unix__
    return true;
    #else
    return true;
    #endif
}  

string getImageInDefaultLocation(string execPath)
{
    // define correct separator based on current operating system
    string separator;
    if (usesLinuxSeparator())
        separator = "/";
    else
        separator = "\\";

    // split path to find the correct folder
    try
    {
        // split path into all its components
        vector<string> path;
        int sepPos = execPath.find(separator,1), lastPos = 0;
        while (sepPos != string::npos)
        {
            path.push_back(execPath.substr(lastPos,sepPos-lastPos));
            lastPos = sepPos+1;
            sepPos = execPath.find(separator, lastPos);
        }

        // rebuild path to point to the default street_scene.png location
        // assumes the executable is generated by cmake inside the folders <PROJECT-MAIN-FOLDER>/build/src
        string filePath(path[0]);
        for (int i = 1; i < path.size()-2; i++)
        {
            filePath = string(filePath + separator + path[i]);
        }
        filePath = string(filePath + separator + "docs" + separator + defImgName);

        return filePath;
    }
    catch(const std::exception& e)
    {
        cout << "You must specify the image file.\nThe default path does not exists" << endl;
        exit(0);
    }
    
    return "";
}

int main(int argc, char** argv)
{
    // Check whether the input arguments are the right amount
    if ((argc != 3) && (argc != 2))
    {
        throw invalid_argument("Usage: <path>/lab04 <task n°> <(OPTIONAL)image path>");
    }

    // Check if a file path is specified, otherwise tries to take the image in the default location
    FILE *file;
    string filename;
    if (argc == 3)
        filename = string(argv[2]);
    else
        filename = getImageInDefaultLocation(string(argv[0]));
    
    if (!(file = fopen(filename.c_str(), "r")))
        throw invalid_argument(filename + " not found"); 
    fclose(file);

    // Check whether the task n° is an integer, if it isn't than exception is thrown within the switch-case below
    int task = 0;
    if (isdigit(*argv[1]))
        task = stoi(argv[1]);
    
    switch (task)
    {
    case 1:
        task01(filename);
        break;

    case 2:
        
        break;

    case 3:
        break;

    case 4:
        break;
    
    default:
        throw invalid_argument("Task n° must be an integer between 1 and 4");
        break;
    }
}